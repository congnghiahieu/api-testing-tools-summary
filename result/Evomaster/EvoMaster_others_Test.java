import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2023-03-23T09:24:30.747460Z[GMT]
 * <br>
 * The generated test suite contains 32 tests
 * <br>
 * Covered targets: 85
 * <br>
 * Used time: 1h 0m 3s
 * <br>
 * Needed budget for current results: 100%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static String baseUrlOfSut = "https://next.kemongmo.com";
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeAll
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test @Timeout(60)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .post(baseUrlOfSut + "/v1/users/overview?date_type=Term")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'distance'", numberMatches(0.0))
                .body("'dis_change'", equalTo(true))
                .body("'duration'", numberMatches(0.0))
                .body("'dur_change'", equalTo(true));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("user_id=TVYYmhz")
                .post(baseUrlOfSut + "/v1/records/get_records_by_user")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_1.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("new_password=")
                .post(baseUrlOfSut + "/v1/users/update_password")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "new_password"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "/v1/auth/me")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("hieu"))
                .body("'nick_name'", containsString("zZ6OgfD0ABon_7I"))
                .body("'date_of_birth'", containsString("C1oQBB"))
                .body("'create_at'", containsString("2023-03-03T04:47:54.275735"))
                .body("'avatar'", containsString("default.jpg"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_2() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("grant_type=password_postfix&username=dW&password=GWBM2Izzng1N&client_id=EE&client_secret=m_V")
                .post(baseUrlOfSut + "/v1/auth/token")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Could not validate credentials"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "/v1/users/96")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("򎐍"))
                .body("'nick_name'", containsString("񬡴IRþ^𩰐õ"))
                .body("'date_of_birth'", containsString(""))
                .body("'create_at'", containsString("2023-03-03T04:47:54.275735"))
                .body("'avatar'", containsString("default.jpg"));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test @Timeout(60)
    public void test_3() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "/v1/users?limit=733")
                .then()
                .statusCode(307)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "/v1/auth/me")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("hieu"))
                .body("'nick_name'", containsString("c7"))
                .body("'date_of_birth'", containsString("eR4kpdR"))
                .body("'create_at'", containsString("2023-03-03T04:47:54.275735"))
                .body("'avatar'", containsString("default.jpg"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=")
                .post(baseUrlOfSut + "/v1/ranking/day")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "input_date"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_2.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_4() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .post(baseUrlOfSut + "/v1/ranking/ranking_calculate")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .get(baseUrlOfSut + "/v1/users/9")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("±\ré􌧇󥥓t\n"))
                .body("'nick_name'", containsString("򀃳񮱧$òÖ¯"))
                .body("'date_of_birth'", containsString("re&¨è𹄎"))
                .body("'create_at'", containsString("2023-03-03T04:47:54.275735"))
                .body("'avatar'", containsString("default.jpg"));
        
        expectationHandler.expect(ems);
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .post(baseUrlOfSut + "/v1/ranking/ranking_calculate")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'result'", containsString("OK"))
                .body("'error'", nullValue());
        
    }
    
    
    @Test @Timeout(60)
    public void test_5() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "/v1/auth/me")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("hieu"))
                .body("'nick_name'", containsString("t1dD"))
                .body("'date_of_birth'", containsString("pRgEMwehZrkl5YWI"))
                .body("'create_at'", containsString("2023-03-03T04:47:54.275735"))
                .body("'avatar'", containsString("default.jpg"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("start_date=&end_date=kzyvVMhftWKsBaAN")
                .post(baseUrlOfSut + "/v1/ranking/period")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "start_date"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_1.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "/v1/records/my_records")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("nick_name=")
                .post(baseUrlOfSut + "/v1/users/update_nickname")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "nick_name"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_3.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_6() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Hi!"));
        
        expectationHandler.expect(ems);
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("avatar=c3d")
                .post(baseUrlOfSut + "/v1/users/update_avatar")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "avatar"))
                .body("'detail'[0].'msg'", containsString("Expected UploadFile, received: <class 'str'>"))
                .body("'detail'[0].'type'", containsString("value_error"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_1.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("avatar=nirMHQGhYsb")
                .post(baseUrlOfSut + "/v1/users/update_avatar")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "avatar"))
                .body("'detail'[0].'msg'", containsString("Expected UploadFile, received: <class 'str'>"))
                .body("'detail'[0].'type'", containsString("value_error"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_2.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "/v1/records/my_records_in_range?" + 
                    "start_date=2023-01-25T23%3A44%3A00&" + 
                    "end_date=2081-08-04T19%3A36%3A33")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=fOSZQtT8hOtqF")
                .post(baseUrlOfSut + "/v1/ranking/week")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_4.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("file_name=MYH1K6ZiV")
                .post(baseUrlOfSut + "/v1/records/evidence_by_name")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("File not found"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=")
                .post(baseUrlOfSut + "/v1/ranking/month")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "input_date"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_1.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("date_of_birth=q8F4VCNFgOa")
                .post(baseUrlOfSut + "/v1/users/update_birthday")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("hieu"))
                .body("'nick_name'", containsString("vGDPH_wEeDT4"))
                .body("'avatar'", containsString("default.jpg"))
                .body("'hashed_password'", containsString("$2b$12$Igy/uv9dIyVQKjGMQKlz1Ox4IzYafThcfb8fZ/4VAic0AwIMtfN6m"))
                .body("'date_of_birth'", containsString("q8F4VCNFgOa"))
                .body("'create_date'", containsString("2023-03-03T04:47:54.275735"));
        
        expectationHandler.expect(ems);
        
        ValidatableResponse res_3 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("nick_name=Gr3ZMetwz&date_of_birth=NLo9c15OMSJfNyD&avatar=ww0tP6")
                .put(baseUrlOfSut + "/v1/users/update_info")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Hi!"));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test @Timeout(60)
    public void test_8() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .post(baseUrlOfSut + "/v1/users/overview?date_type=Year")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'distance'", numberMatches(0.0))
                .body("'dis_change'", equalTo(true))
                .body("'duration'", numberMatches(0.0))
                .body("'dur_change'", equalTo(true));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .post(baseUrlOfSut + "/v1/ranking/ranking_calculate")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'result'", containsString("OK"))
                .body("'error'", nullValue());
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("nick_name=ZjD_88_16Bw")
                .post(baseUrlOfSut + "/v1/users/overview_user_by_nickname")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("User not found"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "/v1/records/my_records_in_range?" + 
                    "start_date=1989-13-23T03%3A20%3A57&" + 
                    "end_date=2000-05-28T09%3A35%3A49")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("query", "start_date"))
                .body("'detail'[0].'msg'", containsString("invalid datetime format"))
                .body("'detail'[0].'type'", containsString("value_error.datetime"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_3.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("distance=0.12681776788490706&duration=0.414522889096412&record_date=K&image_file=iyfk1")
                .post(baseUrlOfSut + "/v1/records/upload")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "/v1/users/1000")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("User not found"));
        
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("avatar=WVWCFLCHFITxwe3P")
                .post(baseUrlOfSut + "/v1/users/update_avatar")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "avatar"))
                .body("'detail'[0].'msg'", containsString("Expected UploadFile, received: <class 'str'>"))
                .body("'detail'[0].'type'", containsString("value_error"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_6.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_7 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "/v1/notification/type?" + 
                    "date_input=1990-08-02T25%3A18%3A32&" + 
                    "date_type=Month")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("query", "date_input"))
                .body("'detail'[0].'msg'", containsString("invalid datetime format"))
                .body("'detail'[0].'type'", containsString("value_error.datetime"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_7.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "/v1/notification?user_id=476")
                .then()
                .statusCode(307)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "/v1/records/my_records")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .post(baseUrlOfSut + "/v1/users/overview")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'distance'", numberMatches(0.0))
                .body("'dis_change'", equalTo(true))
                .body("'duration'", numberMatches(0.0))
                .body("'dur_change'", equalTo(true));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("date_of_birth=DX7gWjmIoNN")
                .post(baseUrlOfSut + "/v1/users/update_birthday")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("hieu"))
                .body("'nick_name'", containsString("t1dD"))
                .body("'avatar'", containsString("default.jpg"))
                .body("'hashed_password'", containsString("$2b$12$ly72005l4bitvQVWIk7wM.kFkaltM6tn9JnATIDQey5eQJqsgswdC"))
                .body("'date_of_birth'", containsString("DX7gWjmIoNN"))
                .body("'create_date'", containsString("2023-03-03T04:47:54.275735"));
        
        expectationHandler.expect(ems);
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .post(baseUrlOfSut + "/v1/users/overview_user")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'nick_name'", containsString("t1dD"))
                .body("'distance'", numberMatches(0.0))
                .body("'duration'", numberMatches(0.0))
                .body("'week'", numberMatches(0.0))
                .body("'month'", numberMatches(0.0))
                .body("'year'", numberMatches(0.0));
        
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("avatar=19U0eaerwwfwrsCk")
                .post(baseUrlOfSut + "/v1/users/update_avatar")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "avatar"))
                .body("'detail'[0].'msg'", containsString("Expected UploadFile, received: <class 'str'>"))
                .body("'detail'[0].'type'", containsString("value_error"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_5.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .post(baseUrlOfSut + "/v1/users/overview_user")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404).contains(res_6.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_10() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("file_name=8J8OUVSjE_&user_id=LHEfk9av_se")
                .post(baseUrlOfSut + "/v1/records/evidence_other_user")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("nick_name=bcP5Bsq")
                .post(baseUrlOfSut + "/v1/users/overview_user_by_nickname")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("User not found"));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "/v1/notification?user_id=781")
                .then()
                .statusCode(307)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_2.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_11() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("new_password=mpc9bP")
                .post(baseUrlOfSut + "/v1/users/update_password")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("nick_name=zVnTUaQLx")
                .post(baseUrlOfSut + "/v1/users/overview_user_by_nickname")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("User not found"));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "/v1/notification?user_id=896")
                .then()
                .statusCode(307)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("user_id=R_VyCMoLQ51W")
                .post(baseUrlOfSut + "/v1/records/get_records_by_user")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_3.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_12() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("username=GuFipNibmbDdNHtg&password=376_p")
                .post(baseUrlOfSut + "/v1/auth/token")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Could not validate credentials"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_13() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .post(baseUrlOfSut + "/v1/users/avatar")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_14() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=qSqvsJx0QYbOO")
                .post(baseUrlOfSut + "/v1/ranking/month")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_15() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("username=5X5nRk7oAoXFkZ&password=6XC3tJReFG&scope=vycFsuh&client_id=ncMM5&client_secret=")
                .post(baseUrlOfSut + "/v1/auth/token")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Could not validate credentials"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=fjANbgSnhFC")
                .post(baseUrlOfSut + "/v1/ranking/year")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_1.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_16() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=dvuytpuhvRQzySF")
                .post(baseUrlOfSut + "/v1/ranking/term")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("start_date=kQECfKolQWfMvm&end_date=")
                .post(baseUrlOfSut + "/v1/ranking/period")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "end_date"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_1.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_17() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("file_name=FFCGYcAs2DdazaK4")
                .post(baseUrlOfSut + "/v1/records/evidence_by_name")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("File not found"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_18() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("nick_name=2SA5LNq1WvnZ3v")
                .post(baseUrlOfSut + "/v1/users/overview_user_by_nickname")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("User not found"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_19() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "/v1/users/870")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("User not found"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_20() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/:-1/openapi.json")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not Found"));
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_21() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("file_name=oCPwFVZ3")
                .post(baseUrlOfSut + "/v1/records/evidence_by_name")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("File not found"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("date_of_birth=")
                .post(baseUrlOfSut + "/v1/users/update_birthday")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "date_of_birth"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_1.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_22() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("nick_name=ZS&date_of_birth=ZUILrhP&avatar=")
                .put(baseUrlOfSut + "/v1/users/update_info")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "avatar"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_23() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("avatar=CXMaLqxB8")
                .post(baseUrlOfSut + "/v1/users/update_avatar")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "avatar"))
                .body("'detail'[0].'msg'", containsString("Expected UploadFile, received: <class 'str'>"))
                .body("'detail'[0].'type'", containsString("value_error"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_24() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("distance=0.30385182920791054&duration=0.2599609383198632&record_date=s&image_file=g")
                .post(baseUrlOfSut + "/v1/records/upload")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "image_file"))
                .body("'detail'[0].'msg'", containsString("Expected UploadFile, received: <class 'str'>"))
                .body("'detail'[0].'type'", containsString("value_error"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_25() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("nick_name=")
                .post(baseUrlOfSut + "/v1/users/overview_user_by_nickname")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "nick_name"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_26() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("user_id=")
                .post(baseUrlOfSut + "/v1/records/get_records_by_user")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "user_id"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_27() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "/v1/records/my_records_in_range?" + 
                    "start_date=2055-13-21T14%3A32%3A43&" + 
                    "end_date=2008-00-21T10%3A43%3A00")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(2))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("query", "start_date"))
                .body("'detail'[0].'msg'", containsString("invalid datetime format"))
                .body("'detail'[0].'type'", containsString("value_error.datetime"))
                .body("'detail'[1].'loc'.size()", equalTo(2))
                .body("'detail'[1].'loc'", hasItems("query", "end_date"))
                .body("'detail'[1].'msg'", containsString("invalid datetime format"))
                .body("'detail'[1].'type'", containsString("value_error.datetime"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_28() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "/v1/notification/type?" + 
                    "date_input=2031-05-21T25%3A27%3A50&" + 
                    "date_type=Month")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("query", "date_input"))
                .body("'detail'[0].'msg'", containsString("invalid datetime format"))
                .body("'detail'[0].'type'", containsString("value_error.datetime"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_29() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("file_name=")
                .post(baseUrlOfSut + "/v1/records/evidence_by_name")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "file_name"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_30() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("start_date=&end_date=nTbqVGtSxUCu_u")
                .post(baseUrlOfSut + "/v1/ranking/period")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "start_date"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_31() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=")
                .post(baseUrlOfSut + "/v1/ranking/year")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "input_date"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }


}
