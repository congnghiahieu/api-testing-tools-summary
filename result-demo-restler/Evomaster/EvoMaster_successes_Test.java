import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2023-03-09T15:15:38.362837Z[GMT]
 * <br>
 * The generated test suite contains 6 tests
 * <br>
 * Covered targets: 13
 * <br>
 * Used time: 1h 0m 4s
 * <br>
 * Needed budget for current results: 74%
 * <br>
 * This file contains test cases that represent successful calls.
 */
public class EvoMaster_successes_Test {

    
    private static String baseUrlOfSut = "https://restlerdemoserver.pagekite.me";
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeAll
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test @Timeout(60)
    public void test_0() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/api/blog/posts")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'items'.size()", equalTo(5))
                .body("'items'[0].'body'", containsString("my first blog post"))
                .body("'items'[0].'checksum'", containsString("392b5"))
                .body("'items'[1].'body'", containsString("109ꕁ0¼"))
                .body("'items'[1].'checksum'", containsString("cbae0"))
                .body("'items'[2].'body'", containsString("ßÞÊ"))
                .body("'items'[2].'checksum'", containsString("cc78e"))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'per_page'", numberMatches(5.0))
                .body("'page'", numberMatches(10.0))
                .body("'total'", numberMatches(5.0));
        
    }
    
    
    @Test @Timeout(60)
    public void test_1() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/api/blog/posts/900")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_2() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .get(baseUrlOfSut + "/api/doc")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("this is the docs"));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test @Timeout(60)
    public void test_3() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 297, " + 
                    " \"body\": \"573mbVOBb3EcVP\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/blog/posts")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'body'", containsString("573mbVOBb3EcVP"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_4() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/api/blog/posts/303")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_5() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 610, " + 
                    " \"body\": \"1yFr\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/blog/posts/610")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }


}
