import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2023-04-14T14:18:32.123573Z[GMT]
 * <br>
 * The generated test suite contains 24 tests
 * <br>
 * Covered targets: 67
 * <br>
 * Used time: 1h 0m 8s
 * <br>
 * Needed budget for current results: 100%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static String baseUrlOfSut = "https://next.kemongmo.com";
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeAll
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test @Timeout(60)
    public void test_0() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/v1/auth/me")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("test10"))
                .body("'nick_name'", containsString("0amOoqS6RvidJfG"))
                .body("'date_of_birth'", containsString("_lbpLO"))
                .body("'create_at'", containsString("2023-03-03T04:47:54.275735"))
                .body("'avatar'", containsString("default.jpg"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/v1/users/923")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("User not found"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("nick_name=jbnOl4_pJ")
                .post(baseUrlOfSut + "/v1/users/overview_user_by_nickname")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("User not found"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Hi!"));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test @Timeout(60)
    public void test_2() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("avatar=F0W")
                .post(baseUrlOfSut + "/v1/users/update_avatar")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "avatar"))
                .body("'detail'[0].'msg'", containsString("Expected UploadFile, received: <class 'str'>"))
                .body("'detail'[0].'type'", containsString("value_error"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("user_id=9")
                .post(baseUrlOfSut + "/v1/records/get_records_by_user")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("file_name=21t")
                .post(baseUrlOfSut + "/v1/records/evidence_by_name")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("File not found"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_3() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("date_of_birth=")
                .post(baseUrlOfSut + "/v1/users/update_birthday")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "date_of_birth"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("nick_name=ssp4OOajApMa")
                .post(baseUrlOfSut + "/v1/users/update_nickname")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("test10"))
                .body("'nick_name'", containsString("ssp4OOajApMa"))
                .body("'avatar'", containsString("default.jpg"))
                .body("'hashed_password'", containsString("$2b$12$rJ6HMLNaZ5lCSbS7VkK7oOtJlT7RrLLcey3LoAPMSr/lgIJEBoC0i"))
                .body("'date_of_birth'", containsString("jD6kCjlhz665S3pc"))
                .body("'create_date'", containsString("2023-03-03T04:47:54.275735"));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test @Timeout(60)
    public void test_4() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("nick_name=yqqLl3boQ6hOm4C0")
                .post(baseUrlOfSut + "/v1/users/update_nickname")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("test10"))
                .body("'nick_name'", containsString("yqqLl3boQ6hOm4C0"))
                .body("'avatar'", containsString("default.jpg"))
                .body("'hashed_password'", containsString("$2b$12$VU82rTdUltYx/YF0v1ap2erKMkN3A5Mj.RKi7LT/SG2WxM.41UQ3m"))
                .body("'date_of_birth'", containsString("xTCWyVAUAM_yFwb8"))
                .body("'create_date'", containsString("2023-03-03T04:47:54.275735"));
        
        expectationHandler.expect(ems);
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/v1/notification/type?date_input=1917-13-18T10%3A26%3A02")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("query", "date_input"))
                .body("'detail'[0].'msg'", containsString("invalid datetime format"))
                .body("'detail'[0].'type'", containsString("value_error.datetime"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_1.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_5() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("file_name=6RG6Wqj1oxEmf2&user_id=")
                .post(baseUrlOfSut + "/v1/records/evidence_other_user")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "user_id"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("nick_name=Uq")
                .post(baseUrlOfSut + "/v1/users/update_nickname")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("test10"))
                .body("'nick_name'", containsString("Uq"))
                .body("'avatar'", containsString("default.jpg"))
                .body("'hashed_password'", containsString("$2b$12$/xxkfEZghThGebjiREnshuDVw2Rq1B5eMciXphbGKLLW0AUFIHqta"))
                .body("'date_of_birth'", containsString("4x"))
                .body("'create_date'", containsString("2023-03-03T04:47:54.275735"));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test @Timeout(60)
    public void test_6() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("user_id=Ez_")
                .post(baseUrlOfSut + "/v1/records/get_records_by_user")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/v1/records/my_records")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("nick_name=XApyyOeZdpOT&date_of_birth=xJR&avatar=o_ae")
                .put(baseUrlOfSut + "/v1/users/update_info")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "avatar"))
                .body("'detail'[0].'msg'", containsString("Expected UploadFile, received: <class 'str'>"))
                .body("'detail'[0].'type'", containsString("value_error"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_2.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/users/vkk")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Hello vkk"));
        
        expectationHandler.expect(ems);
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/v1/users?" + 
                    "skip=513&" + 
                    "limit=603")
                .then()
                .statusCode(307)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=4")
                .post(baseUrlOfSut + "/v1/ranking/week")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_2.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_8() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("date_of_birth=LnpmZ4ia2yUR")
                .post(baseUrlOfSut + "/v1/users/update_birthday")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("test10"))
                .body("'nick_name'", containsString("wrnS7EsL"))
                .body("'avatar'", containsString("default.jpg"))
                .body("'hashed_password'", containsString("$2b$12$5kMjj1EobxHbgmPrMSWaUOTBcqAofk3DCQH7OE94XUmV9wf6xfMkq"))
                .body("'date_of_birth'", containsString("LnpmZ4ia2yUR"))
                .body("'create_date'", containsString("2023-03-03T04:47:54.275735"));
        
        expectationHandler.expect(ems);
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("avatar=6rR92J0wOGMVlX")
                .post(baseUrlOfSut + "/v1/users/update_avatar")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "avatar"))
                .body("'detail'[0].'msg'", containsString("Expected UploadFile, received: <class 'str'>"))
                .body("'detail'[0].'type'", containsString("value_error"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_1.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("start_date=fTkqkAEwLht&end_date=L")
                .post(baseUrlOfSut + "/v1/ranking/period")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_2.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=")
                .post(baseUrlOfSut + "/v1/ranking/term")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "input_date"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("new_password=E3dy2aMnoh")
                .post(baseUrlOfSut + "/v1/users/update_password")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("test10"))
                .body("'nick_name'", containsString("9y"))
                .body("'avatar'", containsString("default.jpg"))
                .body("'hashed_password'", containsString("$2b$12$.pL4Xoe4ONR84gBILjcO6u6ka/kcpQRljen1lEDBVGkBHI2Njloci"))
                .body("'date_of_birth'", containsString("5Ct"))
                .body("'create_date'", containsString("2023-03-03T04:47:54.275735"));
        
        expectationHandler.expect(ems);
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/v1/users/538")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("User not found"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("distance=0.2993759598092135&duration=0.17643606036020476&record_date=B48V&image_file=PuJohCNo")
                .post(baseUrlOfSut + "/v1/records/upload")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "image_file"))
                .body("'detail'[0].'msg'", containsString("Expected UploadFile, received: <class 'str'>"))
                .body("'detail'[0].'type'", containsString("value_error"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_3.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_10() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/v1/users?skip=338")
                .then()
                .statusCode(307)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=Wooy5o")
                .post(baseUrlOfSut + "/v1/ranking/day")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=Kd8GG4R")
                .post(baseUrlOfSut + "/v1/ranking/month")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("avatar=s0ZwZAAsmeb")
                .post(baseUrlOfSut + "/v1/users/update_avatar")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "avatar"))
                .body("'detail'[0].'msg'", containsString("Expected UploadFile, received: <class 'str'>"))
                .body("'detail'[0].'type'", containsString("value_error"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_3.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/users/mGa27MFJ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Hello mGa27MFJ"));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test @Timeout(60)
    public void test_11() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("avatar=")
                .post(baseUrlOfSut + "/v1/users/update_avatar")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "avatar"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=")
                .post(baseUrlOfSut + "/v1/ranking/month")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "input_date"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_1.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"username\": \"i5vHwdt4Fck9\", " + 
                    " \"nick_name\": \"TqIljpu\", " + 
                    " \"password\": \"hOJUUuQyPpmK76\" " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/users")
                .then()
                .statusCode(307)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_2.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_12() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("username=a&password=QzEIzZwHn7YpGOVh&scope=UeBdnNLjt16R628T")
                .post(baseUrlOfSut + "/v1/auth/token")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Could not validate credentials"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_13() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .get(baseUrlOfSut + "/v1/records/my_records")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_14() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .post(baseUrlOfSut + "/v1/ranking/ranking_calculate")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_15() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("file_name=o99OCIxNqPb5T")
                .post(baseUrlOfSut + "/v1/records/evidence_by_name")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("File not found"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_16() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/:-1/openapi.json")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not Found"));
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_17() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("distance=0.6154975655538966&duration=0.6744418769746711&record_date=HuRdAB743&image_file=qja")
                .post(baseUrlOfSut + "/v1/records/upload")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "image_file"))
                .body("'detail'[0].'msg'", containsString("Expected UploadFile, received: <class 'str'>"))
                .body("'detail'[0].'type'", containsString("value_error"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_18() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("nick_name=6454m9MduPrZE&date_of_birth=3Ptbn0Tx&avatar=DTaQ5PHT3")
                .put(baseUrlOfSut + "/v1/users/update_info")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "avatar"))
                .body("'detail'[0].'msg'", containsString("Expected UploadFile, received: <class 'str'>"))
                .body("'detail'[0].'type'", containsString("value_error"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_19() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("avatar=N_eJKW")
                .post(baseUrlOfSut + "/v1/users/update_avatar")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "avatar"))
                .body("'detail'[0].'msg'", containsString("Expected UploadFile, received: <class 'str'>"))
                .body("'detail'[0].'type'", containsString("value_error"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_20() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("file_name=")
                .post(baseUrlOfSut + "/v1/records/evidence_by_name")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "file_name"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_21() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=")
                .post(baseUrlOfSut + "/v1/ranking/week")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "input_date"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_22() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("nick_name=")
                .post(baseUrlOfSut + "/v1/users/update_nickname")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "nick_name"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_23() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("new_password=")
                .post(baseUrlOfSut + "/v1/users/update_password")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "new_password"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("avatar=_ju4l87usaw")
                .post(baseUrlOfSut + "/v1/users/update_avatar")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "avatar"))
                .body("'detail'[0].'msg'", containsString("Expected UploadFile, received: <class 'str'>"))
                .body("'detail'[0].'type'", containsString("value_error"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_1.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }


}
