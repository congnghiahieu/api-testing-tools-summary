import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2023-04-14T14:18:32.111214Z[GMT]
 * <br>
 * The generated test suite contains 14 tests
 * <br>
 * Covered targets: 33
 * <br>
 * Used time: 1h 0m 8s
 * <br>
 * Needed budget for current results: 100%
 * <br>
 * This file contains test cases that represent successful calls.
 */
public class EvoMaster_successes_Test {

    
    private static String baseUrlOfSut = "https://next.kemongmo.com";
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeAll
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test @Timeout(60)
    public void test_0() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/v1/auth/me")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("test10"))
                .body("'nick_name'", containsString("Mp94Tvct7x6lYx_"))
                .body("'date_of_birth'", containsString("3hqMNw4nuXmI6yO"))
                .body("'create_at'", containsString("2023-03-03T04:47:54.275735"))
                .body("'avatar'", containsString("default.jpg"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_1() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .post(baseUrlOfSut + "/v1/users/overview?date_type=Week")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'distance'", numberMatches(0.0))
                .body("'dis_change'", equalTo(true))
                .body("'duration'", numberMatches(0.0))
                .body("'dur_change'", equalTo(true));
        
    }
    
    
    @Test @Timeout(60)
    public void test_2() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .post(baseUrlOfSut + "/v1/ranking/ranking_calculate")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'result'", containsString("OK"))
                .body("'error'", nullValue());
        
    }
    
    
    @Test @Timeout(60)
    public void test_3() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/v1/records/my_records")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test @Timeout(60)
    public void test_4() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/v1/notification/type?date_input=2095-01-26T14%3A13%3A06")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test @Timeout(60)
    public void test_5() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .post(baseUrlOfSut + "/v1/users/overview_user")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'nick_name'", containsString("aq"))
                .body("'distance'", numberMatches(0.0))
                .body("'duration'", numberMatches(0.0))
                .body("'week'", numberMatches(0.0))
                .body("'month'", numberMatches(0.0))
                .body("'year'", numberMatches(0.0));
        
    }
    
    
    @Test @Timeout(60)
    public void test_6() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .post(baseUrlOfSut + "/v1/users/avatar")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("\"/resources/users/default.jpg\""));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test @Timeout(60)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("date_of_birth=VEV8n3Qs")
                .post(baseUrlOfSut + "/v1/users/update_birthday")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("test10"))
                .body("'nick_name'", containsString("HDtQ"))
                .body("'avatar'", containsString("default.jpg"))
                .body("'hashed_password'", containsString("$2b$12$MDuLFshnVNILggmn3b5MY.v.orgTzKQ0Dhr17yHCdrGLDRkdUiyay"))
                .body("'date_of_birth'", containsString("VEV8n3Qs"))
                .body("'create_date'", containsString("2023-03-03T04:47:54.275735"));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test @Timeout(60)
    public void test_8() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("nick_name=Y6Yvn4pB")
                .post(baseUrlOfSut + "/v1/users/update_nickname")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("test10"))
                .body("'nick_name'", containsString("Y6Yvn4pB"))
                .body("'avatar'", containsString("default.jpg"))
                .body("'hashed_password'", containsString("$2b$12$1.wgzIIfTDnrV3E9a/XZl.7DDWoSFpneFOJiBIpWJtxCGPck05RYy"))
                .body("'date_of_birth'", containsString("udAcybJz4eW"))
                .body("'create_date'", containsString("2023-03-03T04:47:54.275735"));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test @Timeout(60)
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Hi!"));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test @Timeout(60)
    public void test_10() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("new_password=TivwGNjER")
                .post(baseUrlOfSut + "/v1/users/update_password")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("test10"))
                .body("'nick_name'", containsString("PDyuOO"))
                .body("'avatar'", containsString("default.jpg"))
                .body("'hashed_password'", containsString("$2b$12$bhSDoNDbwsYHJ0X0bXr4W.gX4gROaE874SqE79xLt1CaNNGwKoLUu"))
                .body("'date_of_birth'", containsString("YWUA8yk"))
                .body("'create_date'", containsString("2023-03-03T04:47:54.275735"));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test @Timeout(60)
    public void test_11() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/v1/notification?user_id=188")
                .then()
                .statusCode(307)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_12() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/v1/users?" + 
                    "skip=1611260774&" + 
                    "limit=455")
                .then()
                .statusCode(307)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_13() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"username\": \"GaQpRYvbf\", " + 
                    " \"date_of_birth\": \"hMvjj5Zro6\", " + 
                    " \"password\": \"wWloT1Kwo5\" " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/users")
                .then()
                .statusCode(307)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }


}
