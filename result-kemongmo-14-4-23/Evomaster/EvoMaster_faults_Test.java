import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2023-04-14T14:18:32.040375Z[GMT]
 * <br>
 * The generated test suite contains 38 tests
 * <br>
 * Covered targets: 140
 * <br>
 * Used time: 1h 0m 8s
 * <br>
 * Needed budget for current results: 100%
 * <br>
 * This file contains test cases that are likely to indicate faults.
 */
public class EvoMaster_faults_Test {

    
    private static String baseUrlOfSut = "https://next.kemongmo.com";
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeAll
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test @Timeout(60)
    public void test_0_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=G5_Y2MMXrou")
                .post(baseUrlOfSut + "/v1/ranking/week")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_1_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=qnyNAcboMm4p_")
                .post(baseUrlOfSut + "/v1/ranking/term")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_2_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("user_id=NhEeG")
                .post(baseUrlOfSut + "/v1/records/get_records_by_user")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_3_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=GobJS2t5OZLNGt8K")
                .post(baseUrlOfSut + "/v1/ranking/year")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_4_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=Y")
                .post(baseUrlOfSut + "/v1/ranking/day")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_5_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("start_date=uMgmyi8e&end_date=N33k")
                .post(baseUrlOfSut + "/v1/ranking/period")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_6_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("date_input=VZk1gH1WTc")
                .post(baseUrlOfSut + "/v1/notification/user")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_7_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=mMX3CQpAuo2")
                .post(baseUrlOfSut + "/v1/ranking/month")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_8_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/v1/records/my_records_in_range?" + 
                    "start_date=1995-04-27T14%3A39%3A09&" + 
                    "end_date=1946-07-05T05%3A31%3A15")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("file_name=lp3wmj11NNOtaCj&user_id=dJfhDlEK58Iphhl")
                .post(baseUrlOfSut + "/v1/records/evidence_other_user")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_1.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_9_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=0eyD432psfujd")
                .post(baseUrlOfSut + "/v1/ranking/day")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("grant_type=prefix_password_postfix&username=TaF3&password=d0BW5UhH_xytldi&scope=3dN23CZwRnf&client_secret=AWh7Mnp")
                .post(baseUrlOfSut + "/v1/auth/token")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "grant_type"))
                .body("'detail'[0].'msg'", containsString("string does not match regex \"password\""))
                .body("'detail'[0].'type'", containsString("value_error.str.regex"))
                .body("'detail'[0].'ctx'.'pattern'", containsString("password"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_1.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_10_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("start_date=&end_date=HMS")
                .post(baseUrlOfSut + "/v1/ranking/period")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "start_date"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("file_name=pDmXhKLo&user_id=BMhLW")
                .post(baseUrlOfSut + "/v1/records/evidence_other_user")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_1.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_11_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/users/Bd4whDTPnH")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Hello Bd4whDTPnH"));
        
        expectationHandler.expect(ems);
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("date_input=C5jxiRTlvNFmmux")
                .post(baseUrlOfSut + "/v1/notification/user")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_1.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_12_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/v1/users/95")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("񒴖"))
                .body("'nick_name'", containsString("·򧂴񩁙"))
                .body("'date_of_birth'", containsString("þ¼"))
                .body("'create_at'", containsString("2023-03-03T04:47:54.275735"))
                .body("'avatar'", containsString("default.jpg"));
        
        expectationHandler.expect(ems);
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=OUp4T0Y")
                .post(baseUrlOfSut + "/v1/ranking/term")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_1.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_13_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=gdkV1Lj_By_yOi6M")
                .post(baseUrlOfSut + "/v1/ranking/week")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("file_name=MO8Lzc&user_id=GVyU3Pq2r")
                .post(baseUrlOfSut + "/v1/records/evidence_other_user")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_1.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_14_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=")
                .post(baseUrlOfSut + "/v1/ranking/year")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/v1/records/my_records")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("start_date=BB1eXVJFgCiWTh&end_date=U_Oe2s")
                .post(baseUrlOfSut + "/v1/ranking/period")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_2.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_15_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .get(baseUrlOfSut + "/v1/auth/me")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("date_input=et5")
                .post(baseUrlOfSut + "/v1/notification/user")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .post(baseUrlOfSut + "/v1/users/overview_user")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404).contains(res_2.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_16_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=xvp")
                .post(baseUrlOfSut + "/v1/ranking/month")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/v1/notification?user_id=743")
                .then()
                .statusCode(307)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/v1/records/my_records_in_range?" + 
                    "start_date=1987-08-12T11%3A48%3A13&" + 
                    "end_date=2030-09-13T25%3A31%3A35")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("query", "end_date"))
                .body("'detail'[0].'msg'", containsString("invalid datetime format"))
                .body("'detail'[0].'type'", containsString("value_error.datetime"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_2.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_17_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/v1/notification?user_id=-1876673944")
                .then()
                .statusCode(307)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/v1/notification?user_id=8")
                .then()
                .statusCode(307)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("user_id=oG8YMWHhLDn")
                .post(baseUrlOfSut + "/v1/records/get_records_by_user")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("date_input=ThhuGDlWV")
                .post(baseUrlOfSut + "/v1/notification/user")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_3.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_18_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("date_input=TJEXYG")
                .post(baseUrlOfSut + "/v1/notification/user")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .get(baseUrlOfSut + "/v1/notification/type?date_input=2027-06-13T02%3A09%3A50")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("grant_type=prefix_password_postfix&username=tVH7O5tmn0RetY&password=duiIV&scope=a1gbyrHn1&client_id=9&client_secret=8qZ")
                .post(baseUrlOfSut + "/v1/auth/token")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "grant_type"))
                .body("'detail'[0].'msg'", containsString("string does not match regex \"password\""))
                .body("'detail'[0].'type'", containsString("value_error.str.regex"))
                .body("'detail'[0].'ctx'.'pattern'", containsString("password"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_2.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_19_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("start_date=TGTRhECxP&end_date=0Kz37pk")
                .post(baseUrlOfSut + "/v1/ranking/period")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("nick_name=AGiOWkwzXIfq6G")
                .post(baseUrlOfSut + "/v1/users/overview_user_by_nickname")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("User not found"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .post(baseUrlOfSut + "/v1/users/avatar")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .post(baseUrlOfSut + "/v1/ranking/ranking_calculate")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'result'", containsString("OK"))
                .body("'error'", nullValue());
        
    }
    
    
    @Test @Timeout(60)
    public void test_20_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("avatar=LYxc9ReLk")
                .post(baseUrlOfSut + "/v1/users/update_avatar")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=ZiFcOQU")
                .post(baseUrlOfSut + "/v1/ranking/week")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=SpNzCW")
                .post(baseUrlOfSut + "/v1/ranking/day")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_2.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_21_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=")
                .post(baseUrlOfSut + "/v1/ranking/year")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "input_date"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("date_input=leNT1CSiUYm1")
                .post(baseUrlOfSut + "/v1/notification/user")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/v1/auth/me")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("test10"))
                .body("'nick_name'", containsString("fOveE427"))
                .body("'date_of_birth'", containsString("NykxBA4i"))
                .body("'create_at'", containsString("2023-03-03T04:47:54.275735"))
                .body("'avatar'", containsString("default.jpg"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/v1/records/my_records_in_range?" + 
                    "start_date=2003-09-18T19%3A57%3A40&" + 
                    "end_date=2052-00-23T20%3A28%3A04")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("query", "end_date"))
                .body("'detail'[0].'msg'", containsString("invalid datetime format"))
                .body("'detail'[0].'type'", containsString("value_error.datetime"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_3.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_22_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .post(baseUrlOfSut + "/v1/users/avatar")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("\"/resources/users/default.jpg\""));
        
        expectationHandler.expect(ems);
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=aXXm")
                .post(baseUrlOfSut + "/v1/ranking/year")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .post(baseUrlOfSut + "/v1/users/overview?date_type=Month")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'distance'", numberMatches(0.0))
                .body("'dis_change'", equalTo(true))
                .body("'duration'", numberMatches(0.0))
                .body("'dur_change'", equalTo(true));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("nick_name=xt7uQiAN7")
                .post(baseUrlOfSut + "/v1/users/update_nickname")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_3.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_23_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=G5waokOMb")
                .post(baseUrlOfSut + "/v1/ranking/month")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("distance=0.41538916111279145&duration=0.8016843137062484&record_date=lt&image_file=paOlwP")
                .post(baseUrlOfSut + "/v1/records/upload")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "image_file"))
                .body("'detail'[0].'msg'", containsString("Expected UploadFile, received: <class 'str'>"))
                .body("'detail'[0].'type'", containsString("value_error"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_1.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/users/B_IjaUaWczxibb")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Hello B_IjaUaWczxibb"));
        
        expectationHandler.expect(ems);
        
        ValidatableResponse res_3 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("file_name=oekEIs3&user_id=vlnG7DfN0rPbY")
                .post(baseUrlOfSut + "/v1/records/evidence_other_user")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/users/CSJw0DSpd8")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Hello CSJw0DSpd8"));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test @Timeout(60)
    public void test_24_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=Mpw4anterlg_g")
                .post(baseUrlOfSut + "/v1/ranking/day")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("file_name=bYPjIfvIgB3&user_id=1")
                .post(baseUrlOfSut + "/v1/records/evidence_other_user")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("File not found"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .post(baseUrlOfSut + "/v1/users/overview_user")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'nick_name'", containsString("7xXnriWBMe"))
                .body("'distance'", numberMatches(0.0))
                .body("'duration'", numberMatches(0.0))
                .body("'week'", numberMatches(0.0))
                .body("'month'", numberMatches(0.0))
                .body("'year'", numberMatches(0.0));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("avatar=5dCNKPrFEH")
                .post(baseUrlOfSut + "/v1/users/update_avatar")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "avatar"))
                .body("'detail'[0].'msg'", containsString("Expected UploadFile, received: <class 'str'>"))
                .body("'detail'[0].'type'", containsString("value_error"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_3.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/v1/records/my_records_in_range?" + 
                    "start_date=1909-09-28T18%3A38%3A33&" + 
                    "end_date=1952-03-13T21%3A25%3A23")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test @Timeout(60)
    public void test_25_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/v1/auth/me")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("test10"))
                .body("'nick_name'", containsString("ZXdM2Cbx"))
                .body("'date_of_birth'", containsString("iZL3"))
                .body("'create_at'", containsString("2023-03-03T04:47:54.275735"))
                .body("'avatar'", containsString("default.jpg"));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=nlN9Iia_e40ZvxH")
                .post(baseUrlOfSut + "/v1/ranking/month")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("start_date=Ri2LDx_N0CUmSQV&end_date=s")
                .post(baseUrlOfSut + "/v1/ranking/period")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=W7UH36pPjfYMvn")
                .post(baseUrlOfSut + "/v1/ranking/day")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_3.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_26_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("date_input=NHHHm")
                .post(baseUrlOfSut + "/v1/notification/user")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("user_id=")
                .post(baseUrlOfSut + "/v1/records/get_records_by_user")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "user_id"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_1.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/v1/records/my_records_in_range?" + 
                    "start_date=2041-09-10T23%3A44%3A05&" + 
                    "end_date=1966-08-00T01%3A05%3A10")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("query", "end_date"))
                .body("'detail'[0].'msg'", containsString("invalid datetime format"))
                .body("'detail'[0].'type'", containsString("value_error.datetime"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_2.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("file_name=PDNnxr0sm9j5VJxp")
                .post(baseUrlOfSut + "/v1/records/evidence_by_name")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("File not found"));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("new_password=a0v8H0G9jia")
                .post(baseUrlOfSut + "/v1/users/update_password")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("test10"))
                .body("'nick_name'", containsString("Uq"))
                .body("'avatar'", containsString("default.jpg"))
                .body("'hashed_password'", containsString("$2b$12$rJ6HMLNaZ5lCSbS7VkK7oOtJlT7RrLLcey3LoAPMSr/lgIJEBoC0i"))
                .body("'date_of_birth'", containsString("4x"))
                .body("'create_date'", containsString("2023-03-03T04:47:54.275735"));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test @Timeout(60)
    public void test_27_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/v1/auth/me")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("test10"))
                .body("'nick_name'", containsString("Mp94Tvct7x6lYx_"))
                .body("'date_of_birth'", containsString("aOAs2"))
                .body("'create_at'", containsString("2023-03-03T04:47:54.275735"))
                .body("'avatar'", containsString("default.jpg"));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("date_input=CA")
                .post(baseUrlOfSut + "/v1/notification/user")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=GwYLYK")
                .post(baseUrlOfSut + "/v1/ranking/year")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("new_password=mGFYezhz7DuKcfG")
                .post(baseUrlOfSut + "/v1/users/update_password")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_3.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_28_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=DlrInGGdyHcs5Aut")
                .post(baseUrlOfSut + "/v1/ranking/year")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/v1/users/719")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("User not found"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("nick_name=yuGBfJ8&date_of_birth=mW17Rq&avatar=D2ySTKMpCR")
                .put(baseUrlOfSut + "/v1/users/update_info")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/v1/auth/me")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("test10"))
                .body("'nick_name'", containsString("EMQ0HPY8vaJlEus3"))
                .body("'date_of_birth'", containsString("udAcybJz4eW"))
                .body("'create_at'", containsString("2023-03-03T04:47:54.275735"))
                .body("'avatar'", containsString("default.jpg"));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("file_name=qXoc3kI8V7&user_id=80YFV")
                .post(baseUrlOfSut + "/v1/records/evidence_other_user")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_4.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_29_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("nick_name=TgZ7kTnAGpBUiK")
                .post(baseUrlOfSut + "/v1/users/update_nickname")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("test10"))
                .body("'nick_name'", containsString("TgZ7kTnAGpBUiK"))
                .body("'avatar'", containsString("default.jpg"))
                .body("'hashed_password'", containsString("$2b$12$nDWZMGTIY1.gCIHgOJ2mz.mxA6FDisJ.eoPPjY18JFKTqfqIWMRtC"))
                .body("'date_of_birth'", containsString("WgRQNeca5o7qOGY"))
                .body("'create_date'", containsString("2023-03-03T04:47:54.275735"));
        
        expectationHandler.expect(ems);
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=PTqItgTSFlp8V5")
                .post(baseUrlOfSut + "/v1/ranking/year")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("date_of_birth=g")
                .post(baseUrlOfSut + "/v1/users/update_birthday")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/v1/users?skip=497")
                .then()
                .statusCode(307)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .post(baseUrlOfSut + "/v1/ranking/ranking_calculate")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'result'", containsString("OK"))
                .body("'error'", nullValue());
        
    }
    
    
    @Test @Timeout(60)
    public void test_30_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("distance=0.8178400704933809&duration=0.11922985373402994&record_date=gLtu0J4fYQ71qkKC&image_file=rvTa7GaiL")
                .post(baseUrlOfSut + "/v1/records/upload")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("distance=0.17505577814300655&duration=0.05145499452556834&record_date=&image_file=FcfQH")
                .post(baseUrlOfSut + "/v1/records/upload")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(2))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "record_date"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"))
                .body("'detail'[1].'loc'.size()", equalTo(2))
                .body("'detail'[1].'loc'", hasItems("body", "image_file"))
                .body("'detail'[1].'msg'", containsString("Expected UploadFile, received: <class 'str'>"))
                .body("'detail'[1].'type'", containsString("value_error"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_1.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("nick_name=HFO0yEt&date_of_birth=pFK&avatar=t0buNSXyQqM37")
                .put(baseUrlOfSut + "/v1/users/update_info")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "avatar"))
                .body("'detail'[0].'msg'", containsString("Expected UploadFile, received: <class 'str'>"))
                .body("'detail'[0].'type'", containsString("value_error"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_2.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=IpgEMKWGGTyYWNq")
                .post(baseUrlOfSut + "/v1/ranking/month")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .get(baseUrlOfSut + "/v1/records/my_records_in_range?" + 
                    "start_date=1943-13-26T14%3A38%3A51&" + 
                    "end_date=2012-03-14T06%3A35%3A27")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .post(baseUrlOfSut + "/v1/users/overview_user")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'nick_name'", containsString("TgZ7kTnAGpBUiK"))
                .body("'distance'", numberMatches(0.0))
                .body("'duration'", numberMatches(0.0))
                .body("'week'", numberMatches(0.0))
                .body("'month'", numberMatches(0.0))
                .body("'year'", numberMatches(0.0));
        
    }
    
    
    @Test @Timeout(60)
    public void test_31_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .post(baseUrlOfSut + "/v1/users/overview_user")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'nick_name'", containsString("c3l"))
                .body("'distance'", numberMatches(0.0))
                .body("'duration'", numberMatches(0.0))
                .body("'week'", numberMatches(0.0))
                .body("'month'", numberMatches(0.0))
                .body("'year'", numberMatches(0.0));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/v1/auth/me")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("test10"))
                .body("'nick_name'", containsString("c3l"))
                .body("'date_of_birth'", containsString("3qFwnr"))
                .body("'create_at'", containsString("2023-03-03T04:47:54.275735"))
                .body("'avatar'", containsString("default.jpg"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("file_name=")
                .post(baseUrlOfSut + "/v1/records/evidence_by_name")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("date_input=YdC2Ww")
                .post(baseUrlOfSut + "/v1/notification/user")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("date_input=1oGiwhCWD6vrclqQ")
                .post(baseUrlOfSut + "/v1/notification/user")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"username\": \"bYWjOSbxKb\", " + 
                    " \"nick_name\": \"vu\", " + 
                    " \"date_of_birth\": \"v7\", " + 
                    " \"create_at\": \"1984-11-26T05:16:52\", " + 
                    " \"avatar\": \"LmwaO\", " + 
                    " \"password\": \"0w\" " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/users")
                .then()
                .statusCode(307)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_5.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .post(baseUrlOfSut + "/v1/ranking/ranking_calculate")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'result'", containsString("OK"))
                .body("'error'", nullValue());
        
    }
    
    
    @Test @Timeout(60)
    public void test_32_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("user_id=0")
                .post(baseUrlOfSut + "/v1/records/get_records_by_user")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("User not found"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("avatar=B5")
                .post(baseUrlOfSut + "/v1/users/update_avatar")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "avatar"))
                .body("'detail'[0].'msg'", containsString("Expected UploadFile, received: <class 'str'>"))
                .body("'detail'[0].'type'", containsString("value_error"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_1.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .post(baseUrlOfSut + "/v1/ranking/ranking_calculate")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'result'", containsString("OK"))
                .body("'error'", nullValue());
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("avatar=J")
                .post(baseUrlOfSut + "/v1/users/update_avatar")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "avatar"))
                .body("'detail'[0].'msg'", containsString("Expected UploadFile, received: <class 'str'>"))
                .body("'detail'[0].'type'", containsString("value_error"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_3.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .post(baseUrlOfSut + "/v1/ranking/ranking_calculate")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'result'", containsString("OK"))
                .body("'error'", nullValue());
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/v1/notification/type?date_input=1908-11-12T04%3A43%3A09")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        ValidatableResponse res_6 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=c")
                .post(baseUrlOfSut + "/v1/ranking/year")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=iH")
                .post(baseUrlOfSut + "/v1/ranking/term")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_7.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_33_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("nick_name=")
                .post(baseUrlOfSut + "/v1/users/overview_user_by_nickname")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "nick_name"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("start_date=x6fhGItzj&end_date=7JHTSro")
                .post(baseUrlOfSut + "/v1/ranking/period")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("date_of_birth=cTJwJjv05H_a6")
                .post(baseUrlOfSut + "/v1/users/update_birthday")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("test10"))
                .body("'nick_name'", containsString("0amOoqS6RvidJfG"))
                .body("'avatar'", containsString("default.jpg"))
                .body("'hashed_password'", containsString("$2b$12$D4ELHKuAbUNbpDx37Rxd0OO58SRrzFOk9DEZyHn2ea.VggK3fC2I."))
                .body("'date_of_birth'", containsString("cTJwJjv05H_a6"))
                .body("'create_date'", containsString("2023-03-03T04:47:54.275735"));
        
        expectationHandler.expect(ems);
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/v1/users/806")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("User not found"));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("nick_name=sE7oHinJRw")
                .post(baseUrlOfSut + "/v1/users/update_nickname")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("test10"))
                .body("'nick_name'", containsString("sE7oHinJRw"))
                .body("'avatar'", containsString("default.jpg"))
                .body("'hashed_password'", containsString("$2b$12$D4ELHKuAbUNbpDx37Rxd0OO58SRrzFOk9DEZyHn2ea.VggK3fC2I."))
                .body("'date_of_birth'", containsString("cTJwJjv05H_a6"))
                .body("'create_date'", containsString("2023-03-03T04:47:54.275735"));
        
        expectationHandler.expect(ems);
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/v1/users")
                .then()
                .statusCode(307)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_5.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_34_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("distance=0.9639457253080439&duration=0.33153983116743957&record_date=zngxc9EzXmc&image_file=kkVsOFM")
                .post(baseUrlOfSut + "/v1/records/upload")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "image_file"))
                .body("'detail'[0].'msg'", containsString("Expected UploadFile, received: <class 'str'>"))
                .body("'detail'[0].'type'", containsString("value_error"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=_g3ZnbxVhj5")
                .post(baseUrlOfSut + "/v1/ranking/term")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/v1/users/876")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("User not found"));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=BXm9C3FXTZuA5eG")
                .post(baseUrlOfSut + "/v1/ranking/term")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=BLGkkLbbrS")
                .post(baseUrlOfSut + "/v1/ranking/year")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("user_id=Te")
                .post(baseUrlOfSut + "/v1/records/get_records_by_user")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_5.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_35_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=")
                .post(baseUrlOfSut + "/v1/ranking/day")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "input_date"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=twag5qqf3Gej")
                .post(baseUrlOfSut + "/v1/ranking/year")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .post(baseUrlOfSut + "/v1/ranking/ranking_calculate")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'result'", containsString("OK"))
                .body("'error'", nullValue());
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("file_name=tpDrvvto_n&user_id=vwS")
                .post(baseUrlOfSut + "/v1/records/evidence_other_user")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=oJBuNJDQoPphq99x")
                .post(baseUrlOfSut + "/v1/ranking/week")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_4.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_36_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/v1/users/319")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("User not found"));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=GbAXFoib")
                .post(baseUrlOfSut + "/v1/ranking/week")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("distance=0.910257269491149&duration=0.9393394399144046&record_date=QMFIeEup4pVuNkI&image_file=yBUgD")
                .post(baseUrlOfSut + "/v1/records/upload")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "image_file"))
                .body("'detail'[0].'msg'", containsString("Expected UploadFile, received: <class 'str'>"))
                .body("'detail'[0].'type'", containsString("value_error"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_2.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=R0VH3g6EEBW")
                .post(baseUrlOfSut + "/v1/ranking/month")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("nick_name=U")
                .post(baseUrlOfSut + "/v1/users/overview_user_by_nickname")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("User not found"));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=7xALEthQjqD42")
                .post(baseUrlOfSut + "/v1/ranking/year")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/v1/users?skip=41")
                .then()
                .statusCode(307)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"username\": \"ucK1xIqTIQ\", " + 
                    " \"nick_name\": \"SBYdPbhPVK8\", " + 
                    " \"date_of_birth\": \"XL59ZwFm\", " + 
                    " \"create_at\": \"1905-00-04T19:56:46\", " + 
                    " \"password\": \"DtX17tJmjg6Vrv7V\" " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/users")
                .then()
                .statusCode(307)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_7.extract().statusCode()));
        
        ValidatableResponse res_8 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("date_input=")
                .post(baseUrlOfSut + "/v1/notification/user")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "date_input"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_8.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_37_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Hi!"));
        
        expectationHandler.expect(ems);
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .get(baseUrlOfSut + "/v1/notification/type?date_input=1951-13-19T01%3A54%3A26")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("query", "date_input"))
                .body("'detail'[0].'msg'", containsString("invalid datetime format"))
                .body("'detail'[0].'type'", containsString("value_error.datetime"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_1.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=Pf")
                .post(baseUrlOfSut + "/v1/ranking/month")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("file_name=YUK1PtJ")
                .post(baseUrlOfSut + "/v1/records/evidence_by_name")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("File not found"));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("nick_name=L")
                .post(baseUrlOfSut + "/v1/users/update_nickname")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("date_input=PceHLK")
                .post(baseUrlOfSut + "/v1/notification/user")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=")
                .post(baseUrlOfSut + "/v1/ranking/term")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "input_date"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_6.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_7 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=nLLZ")
                .post(baseUrlOfSut + "/v1/ranking/day")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_7.extract().statusCode()));
        
        ValidatableResponse res_8 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMjYiLCJleHAiOjE2ODE1NjQ0MDF9.fLTsqdFEa_XoHYDV_gAhDwb0gfDaZP7JeX5_NQho764") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=pmp1P")
                .post(baseUrlOfSut + "/v1/ranking/day")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_8.extract().statusCode()));
    }


}
