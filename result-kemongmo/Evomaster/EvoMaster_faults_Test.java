import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2023-03-23T09:24:30.580548Z[GMT]
 * <br>
 * The generated test suite contains 30 tests
 * <br>
 * Covered targets: 124
 * <br>
 * Used time: 1h 0m 3s
 * <br>
 * Needed budget for current results: 100%
 * <br>
 * This file contains test cases that are likely to indicate faults.
 */
public class EvoMaster_faults_Test {

    
    private static String baseUrlOfSut = "https://next.kemongmo.com";
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeAll
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test @Timeout(60)
    public void test_0_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("start_date=f9gPFF7&end_date=P2S_KxJp_3")
                .post(baseUrlOfSut + "/v1/ranking/period")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_1_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=4zvgOkLK1iNh")
                .post(baseUrlOfSut + "/v1/ranking/year")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_2_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=n1mJMQLVvN9z")
                .post(baseUrlOfSut + "/v1/ranking/month")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_3_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=LXHdQjsRj")
                .post(baseUrlOfSut + "/v1/ranking/term")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_4_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("user_id=faOhWtjEDKx")
                .post(baseUrlOfSut + "/v1/records/get_records_by_user")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_5_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("date_input=PZS0gbk")
                .post(baseUrlOfSut + "/v1/notification/user")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_6_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=bvy1Lpj9")
                .post(baseUrlOfSut + "/v1/ranking/day")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_7_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"username\": \"IAgefkyt\", " + 
                    " \"nick_name\": \"\", " + 
                    " \"date_of_birth\": \"YjkrW6KYmjF\", " + 
                    " \"create_at\": \"2025-09-08T14:11:45\", " + 
                    " \"avatar\": \"ZGe2MT\", " + 
                    " \"password\": \"P3\" " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/users")
                .then()
                .statusCode(307)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("date_input=lDTtTcI")
                .post(baseUrlOfSut + "/v1/notification/user")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_1.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_8_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("grant_type=prefix_password_postfix&username=CHeOeT6LDi&password=kpbl3NzxPu1jAU&scope=mO78UB0Ki2Opi&client_secret=Am")
                .post(baseUrlOfSut + "/v1/auth/token")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "grant_type"))
                .body("'detail'[0].'msg'", containsString("string does not match regex \"password\""))
                .body("'detail'[0].'type'", containsString("value_error.str.regex"))
                .body("'detail'[0].'ctx'.'pattern'", containsString("password"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("user_id=L0")
                .post(baseUrlOfSut + "/v1/records/get_records_by_user")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_1.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_9_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=i3DYe")
                .post(baseUrlOfSut + "/v1/ranking/term")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=vZay")
                .post(baseUrlOfSut + "/v1/ranking/day")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_1.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_10_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("file_name=nJqAUlXd&user_id=")
                .post(baseUrlOfSut + "/v1/records/evidence_other_user")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "user_id"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("date_input=dWi7bvb9R")
                .post(baseUrlOfSut + "/v1/notification/user")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_1.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_11_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("new_password=0kMThRRyIWsvRm0")
                .post(baseUrlOfSut + "/v1/users/update_password")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("hieu"))
                .body("'nick_name'", containsString("VavmZvycSD"))
                .body("'avatar'", containsString("default.jpg"))
                .body("'hashed_password'", containsString("$2b$12$LKOi2e6j7fvL3AajM359E.KXzDNS3EuiVDLrHlvYh3TzAwyuu6S86"))
                .body("'date_of_birth'", containsString("H_afsEJwxpP"))
                .body("'create_date'", containsString("2023-03-03T04:47:54.275735"));
        
        expectationHandler.expect(ems);
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=cjNzG_")
                .post(baseUrlOfSut + "/v1/ranking/month")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_1.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_12_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .post(baseUrlOfSut + "/v1/users/avatar")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("\"/resources/users/default.jpg\""));
        
        expectationHandler.expect(ems);
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=P5etwz8JxwOplS")
                .post(baseUrlOfSut + "/v1/ranking/week")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_1.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_13_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("file_name=KAWEUq8S1KZ&user_id=pwWkJFmQqHBPyi")
                .post(baseUrlOfSut + "/v1/records/evidence_other_user")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=v6b9I4CQ")
                .post(baseUrlOfSut + "/v1/ranking/day")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_1.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_14_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("avatar=")
                .post(baseUrlOfSut + "/v1/users/update_avatar")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("date_input=FFOflkp2_")
                .post(baseUrlOfSut + "/v1/notification/user")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("avatar=XXzYLX")
                .post(baseUrlOfSut + "/v1/users/update_avatar")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "avatar"))
                .body("'detail'[0].'msg'", containsString("Expected UploadFile, received: <class 'str'>"))
                .body("'detail'[0].'type'", containsString("value_error"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_2.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_15_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("start_date=0Igy&end_date=dWpG")
                .post(baseUrlOfSut + "/v1/ranking/period")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("avatar=3HRdwZ7sU")
                .post(baseUrlOfSut + "/v1/users/update_avatar")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "avatar"))
                .body("'detail'[0].'msg'", containsString("Expected UploadFile, received: <class 'str'>"))
                .body("'detail'[0].'type'", containsString("value_error"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_1.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "/v1/records/my_records_in_range?" + 
                    "start_date=1948-01-13T21%3A53%3A44&" + 
                    "end_date=1907-13-13T11%3A52%3A00")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("query", "end_date"))
                .body("'detail'[0].'msg'", containsString("invalid datetime format"))
                .body("'detail'[0].'type'", containsString("value_error.datetime"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_2.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .get(baseUrlOfSut + "/v1/records/my_records_in_range?" + 
                    "start_date=2062-01-02T-1%3A33%3A03&" + 
                    "end_date=2051-09-23T08%3A18%3A12")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_3.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_16_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=")
                .post(baseUrlOfSut + "/v1/ranking/week")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "input_date"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("grant_type=password&username=8TH&password=mwZDJ88TK&scope=3bJNVv&client_id=iy6LOUryWo")
                .post(baseUrlOfSut + "/v1/auth/token")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Could not validate credentials"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_1.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "/v1/notification/type?date_input=1912-06-14T11%3A10%3A37")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=BWZxvaw")
                .post(baseUrlOfSut + "/v1/ranking/year")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_3.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_17_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("nick_name=NXj")
                .post(baseUrlOfSut + "/v1/users/update_nickname")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Hi!"));
        
        expectationHandler.expect(ems);
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "/v1/notification?user_id=177")
                .then()
                .statusCode(307)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("nick_name=O9f9rqv")
                .post(baseUrlOfSut + "/v1/users/overview_user_by_nickname")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("User not found"));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("date_input=bm9P61sEae1sPT")
                .post(baseUrlOfSut + "/v1/notification/user")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_4.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_18_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=bo9Vo")
                .post(baseUrlOfSut + "/v1/ranking/day")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("new_password=LBzFKCw5kU9F")
                .post(baseUrlOfSut + "/v1/users/update_password")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("hieu"))
                .body("'nick_name'", containsString("QwIW4Vmcwdt"))
                .body("'avatar'", containsString("default.jpg"))
                .body("'hashed_password'", containsString("$2b$12$WpOEuPVeSQFNsEl8bYMeUe48y6la1y.IZVvLvEorSNuwkDId8mUoq"))
                .body("'date_of_birth'", containsString("k5uIz8K_zsDCpPt"))
                .body("'create_date'", containsString("2023-03-03T04:47:54.275735"));
        
        expectationHandler.expect(ems);
        
        ValidatableResponse res_2 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("start_date=cufXKawyEM&end_date=5snX")
                .post(baseUrlOfSut + "/v1/ranking/period")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("nick_name=KK4B5UELAtKv64_")
                .post(baseUrlOfSut + "/v1/users/update_nickname")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("hieu"))
                .body("'nick_name'", containsString("KK4B5UELAtKv64_"))
                .body("'avatar'", containsString("default.jpg"))
                .body("'hashed_password'", containsString("$2b$12$WpOEuPVeSQFNsEl8bYMeUe48y6la1y.IZVvLvEorSNuwkDId8mUoq"))
                .body("'date_of_birth'", containsString("k5uIz8K_zsDCpPt"))
                .body("'create_date'", containsString("2023-03-03T04:47:54.275735"));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test @Timeout(60)
    public void test_19_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .get(baseUrlOfSut + "/users/tsOVWS3KPF8")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Hello tsOVWS3KPF8"));
        
        expectationHandler.expect(ems);
        
        ValidatableResponse res_1 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("file_name=Zu")
                .post(baseUrlOfSut + "/v1/records/evidence_by_name")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("user_id=re1yAaGS")
                .post(baseUrlOfSut + "/v1/records/get_records_by_user")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("date_of_birth=6cK7016H")
                .post(baseUrlOfSut + "/v1/users/update_birthday")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("hieu"))
                .body("'nick_name'", containsString("QwIW4Vmcwdt"))
                .body("'avatar'", containsString("default.jpg"))
                .body("'hashed_password'", containsString("$2b$12$OCW5f1GO67h2v/PA5/9oxeyOuCX2CeJ9uqj1C9KbLZlSp9JDA2mv6"))
                .body("'date_of_birth'", containsString("6cK7016H"))
                .body("'create_date'", containsString("2023-03-03T04:47:54.275735"));
        
        expectationHandler.expect(ems);
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "/users/TEr9")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Hello TEr9"));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test @Timeout(60)
    public void test_20_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .get(baseUrlOfSut + "/v1/notification/type?" + 
                    "date_input=1920-05-05T12%3A34%3A45&" + 
                    "date_type=EVOMASTER")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=VtPfzT4kWfrvmM")
                .post(baseUrlOfSut + "/v1/ranking/week")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/json")
                .body(" { " + 
                    " \"username\": \"1\", " + 
                    " \"avatar\": \"a3\", " + 
                    " \"password\": \"ReBIZq\" " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/users")
                .then()
                .statusCode(307)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .post(baseUrlOfSut + "/v1/users/overview_user")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'nick_name'", containsString("QwIW4Vmcwdt"))
                .body("'distance'", numberMatches(0.0))
                .body("'duration'", numberMatches(0.0))
                .body("'week'", numberMatches(0.0))
                .body("'month'", numberMatches(0.0))
                .body("'year'", numberMatches(0.0));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .get(baseUrlOfSut + "/users/ak")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Hello ak"));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test @Timeout(60)
    public void test_21_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("start_date=f84meXIOB&end_date=ftNB6FdqJ")
                .post(baseUrlOfSut + "/v1/ranking/period")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("file_name=4tCeVkuZqdD8of")
                .post(baseUrlOfSut + "/v1/records/evidence_by_name")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("File not found"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("avatar=u79GhdY9ktUl7")
                .post(baseUrlOfSut + "/v1/users/update_avatar")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "avatar"))
                .body("'detail'[0].'msg'", containsString("Expected UploadFile, received: <class 'str'>"))
                .body("'detail'[0].'type'", containsString("value_error"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_2.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=UOXtwuXGYeRku")
                .post(baseUrlOfSut + "/v1/ranking/term")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .get(baseUrlOfSut + "/v1/records/my_records")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404).contains(res_4.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_22_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=6saNuvApkS7")
                .post(baseUrlOfSut + "/v1/ranking/month")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("file_name=Jkvlrr5HB9xdCa")
                .post(baseUrlOfSut + "/v1/records/evidence_by_name")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("File not found"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .get(baseUrlOfSut + "/v1/auth/me")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "/v1/users?skip=545")
                .then()
                .statusCode(307)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("date_input=eXw9PSIvsOP4V9np")
                .post(baseUrlOfSut + "/v1/notification/user")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("nick_name=ppy&date_of_birth=p8dYKiPDuDwD_ux_&avatar=rdZgUf6zn7P")
                .put(baseUrlOfSut + "/v1/users/update_info")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "avatar"))
                .body("'detail'[0].'msg'", containsString("Expected UploadFile, received: <class 'str'>"))
                .body("'detail'[0].'type'", containsString("value_error"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_5.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("file_name=hrYJy")
                .post(baseUrlOfSut + "/v1/records/evidence_by_name")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("File not found"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_23_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("date_input=ulIiWj_i")
                .post(baseUrlOfSut + "/v1/notification/user")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "/v1/users")
                .then()
                .statusCode(307)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=")
                .post(baseUrlOfSut + "/v1/ranking/month")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "input_date"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_2.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("file_name=Vo_vU9ZGdxIM4&user_id=Sl_xxAHGpyUiLu4T")
                .post(baseUrlOfSut + "/v1/records/evidence_other_user")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=6z")
                .post(baseUrlOfSut + "/v1/ranking/week")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("nick_name=yBHs9GFZ&date_of_birth=pu4ioQjy3iFfOECD&avatar=xDPp5a")
                .put(baseUrlOfSut + "/v1/users/update_info")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "avatar"))
                .body("'detail'[0].'msg'", containsString("Expected UploadFile, received: <class 'str'>"))
                .body("'detail'[0].'type'", containsString("value_error"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_5.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_24_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("new_password=")
                .post(baseUrlOfSut + "/v1/users/update_password")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "new_password"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=")
                .post(baseUrlOfSut + "/v1/ranking/term")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "input_date"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_1.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("file_name=DZiXu&user_id=4WAfKtTQw_")
                .post(baseUrlOfSut + "/v1/records/evidence_other_user")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Hi!"));
        
        expectationHandler.expect(ems);
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=pkk")
                .post(baseUrlOfSut + "/v1/ranking/year")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("file_name=ggjer")
                .post(baseUrlOfSut + "/v1/records/evidence_by_name")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("File not found"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_25_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("grant_type=password_postfix&username=x&password=xiijVfgxTcP9U")
                .post(baseUrlOfSut + "/v1/auth/token")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Could not validate credentials"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "/v1/auth/me")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("hieu"))
                .body("'nick_name'", containsString("gpNS6TlDCM"))
                .body("'date_of_birth'", containsString("jEuM9Drl4"))
                .body("'create_at'", containsString("2023-03-03T04:47:54.275735"))
                .body("'avatar'", containsString("default.jpg"));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .post(baseUrlOfSut + "/v1/users/overview_user")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'nick_name'", containsString("gpNS6TlDCM"))
                .body("'distance'", numberMatches(0.0))
                .body("'duration'", numberMatches(0.0))
                .body("'week'", numberMatches(0.0))
                .body("'month'", numberMatches(0.0))
                .body("'year'", numberMatches(0.0));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Hi!"));
        
        expectationHandler.expect(ems);
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=3WQW1")
                .post(baseUrlOfSut + "/v1/ranking/term")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "/v1/records/my_records_in_range?" + 
                    "start_date=1970-07-06T01%3A28%3A18&" + 
                    "end_date=2074-03-18T16%3A43%3A24")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("date_input=")
                .post(baseUrlOfSut + "/v1/notification/user")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "date_input"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_6.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_26_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("nick_name=Xzv0")
                .post(baseUrlOfSut + "/v1/users/update_nickname")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("hieu"))
                .body("'nick_name'", containsString("Xzv0"))
                .body("'avatar'", containsString("default.jpg"))
                .body("'hashed_password'", containsString("$2b$12$gf47ZNpFFDsbdchf6YLa1Ou6rrGqvOXzBGy4RGEakKs5o/V4FewYy"))
                .body("'date_of_birth'", containsString("zsfzAqrds"))
                .body("'create_date'", containsString("2023-03-03T04:47:54.275735"));
        
        expectationHandler.expect(ems);
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=b3E")
                .post(baseUrlOfSut + "/v1/ranking/week")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("date_input=9JsHPHhnOy4v76")
                .post(baseUrlOfSut + "/v1/notification/user")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .post(baseUrlOfSut + "/v1/users/overview_user")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'nick_name'", containsString("Xzv0"))
                .body("'distance'", numberMatches(0.0))
                .body("'duration'", numberMatches(0.0))
                .body("'week'", numberMatches(0.0))
                .body("'month'", numberMatches(0.0))
                .body("'year'", numberMatches(0.0));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("date_input=q1_YODJetQW5F")
                .post(baseUrlOfSut + "/v1/notification/user")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("date_of_birth=4")
                .post(baseUrlOfSut + "/v1/users/update_birthday")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_5.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .post(baseUrlOfSut + "/v1/ranking/ranking_calculate")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'result'", containsString("OK"))
                .body("'error'", nullValue());
        
    }
    
    
    @Test @Timeout(60)
    public void test_27_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=4R98GdWgp0_3hH")
                .post(baseUrlOfSut + "/v1/ranking/term")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("file_name=fPpFSCKkXP")
                .post(baseUrlOfSut + "/v1/records/evidence_by_name")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("File not found"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("date_of_birth=")
                .post(baseUrlOfSut + "/v1/users/update_birthday")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "date_of_birth"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_2.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_3 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("avatar=7W1Yd")
                .post(baseUrlOfSut + "/v1/users/update_avatar")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "avatar"))
                .body("'detail'[0].'msg'", containsString("Expected UploadFile, received: <class 'str'>"))
                .body("'detail'[0].'type'", containsString("value_error"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_3.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "/v1/users")
                .then()
                .statusCode(307)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("new_password=lQFRjy3WjNd")
                .post(baseUrlOfSut + "/v1/users/update_password")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("hieu"))
                .body("'nick_name'", containsString("TBwDXOnF"))
                .body("'avatar'", containsString("default.jpg"))
                .body("'hashed_password'", containsString("$2b$12$.GyXy5zoQfmR6uEGlUVEcOhki8Zv1iDTsN8b6/lG7nJFOzhdmU./m"))
                .body("'date_of_birth'", containsString("_M6P2"))
                .body("'create_date'", containsString("2023-03-03T04:47:54.275735"));
        
        expectationHandler.expect(ems);
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("file_name=t7&user_id=1")
                .post(baseUrlOfSut + "/v1/records/evidence_other_user")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("File not found"));
        
        
        ValidatableResponse res_7 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("new_password=B3alaUoh")
                .post(baseUrlOfSut + "/v1/users/update_password")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("hieu"))
                .body("'nick_name'", containsString("TBwDXOnF"))
                .body("'avatar'", containsString("default.jpg"))
                .body("'hashed_password'", containsString("$2b$12$IC3z3/RH2ekguc1EMEqyPuZeKAydiEfCZM5NwSDSv7EtXWpCmqAyi"))
                .body("'date_of_birth'", containsString("_M6P2"))
                .body("'create_date'", containsString("2023-03-03T04:47:54.275735"));
        
        expectationHandler.expect(ems);
        
        ValidatableResponse res_8 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("nick_name=F5jKN_l")
                .post(baseUrlOfSut + "/v1/users/update_nickname")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("hieu"))
                .body("'nick_name'", containsString("F5jKN_l"))
                .body("'avatar'", containsString("default.jpg"))
                .body("'hashed_password'", containsString("$2b$12$IC3z3/RH2ekguc1EMEqyPuZeKAydiEfCZM5NwSDSv7EtXWpCmqAyi"))
                .body("'date_of_birth'", containsString("_M6P2"))
                .body("'create_date'", containsString("2023-03-03T04:47:54.275735"));
        
        expectationHandler.expect(ems);
        
        ValidatableResponse res_9 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "/v1/notification?user_id=176")
                .then()
                .statusCode(307)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_9.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_28_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "/v1/users?" + 
                    "skip=365&" + 
                    "limit=488")
                .then()
                .statusCode(307)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=5mU_Cv")
                .post(baseUrlOfSut + "/v1/ranking/term")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("start_date=BsRY&end_date=MXGR6")
                .post(baseUrlOfSut + "/v1/ranking/period")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("user_id=5")
                .post(baseUrlOfSut + "/v1/records/get_records_by_user")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "/v1/records/my_records_in_range?" + 
                    "start_date=1922-04-25T23%3A22%3A32&" + 
                    "end_date=2098-08-19T21%3A51%3A51")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "/v1/records/my_records")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "/v1/notification/type?date_input=2012-03-28T07%3A50%3A16")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v1/users/503")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("User not found"));
        
        
        ValidatableResponse res_8 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("new_password=xhRaCy")
                .post(baseUrlOfSut + "/v1/users/update_password")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("hieu"))
                .body("'nick_name'", containsString("zZ6OgfD0ABon_7I"))
                .body("'avatar'", containsString("default.jpg"))
                .body("'hashed_password'", containsString("$2b$12$TLi.DzRZS1RKyLVD8Uu2kOYa2Gjx/jEUZ2BuAQZFkrNFM9YNj7CrW"))
                .body("'date_of_birth'", containsString("C1oQBB"))
                .body("'create_date'", containsString("2023-03-03T04:47:54.275735"));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test @Timeout(60)
    public void test_29_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("date_input=Qlj")
                .post(baseUrlOfSut + "/v1/notification/user")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Not authenticated"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("nick_name=8&date_of_birth=&avatar=T2I")
                .put(baseUrlOfSut + "/v1/users/update_info")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(2))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "date_of_birth"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"))
                .body("'detail'[1].'loc'.size()", equalTo(2))
                .body("'detail'[1].'loc'", hasItems("body", "avatar"))
                .body("'detail'[1].'msg'", containsString("Expected UploadFile, received: <class 'str'>"))
                .body("'detail'[1].'type'", containsString("value_error"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_1.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("nick_name=r")
                .post(baseUrlOfSut + "/v1/users/update_nickname")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("start_date=zukalMz2MR1N68Bm&end_date=BM6H7ln7m6DgmWO")
                .post(baseUrlOfSut + "/v1/ranking/period")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .get(baseUrlOfSut + "/v1/records/my_records")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("nick_name=")
                .post(baseUrlOfSut + "/v1/users/overview_user_by_nickname")
                .then()
                .statusCode(422)
                .assertThat()
                .contentType("application/json")
                .body("'detail'.size()", equalTo(1))
                .body("'detail'[0].'loc'.size()", equalTo(2))
                .body("'detail'[0].'loc'", hasItems("body", "nick_name"))
                .body("'detail'[0].'msg'", containsString("field required"))
                .body("'detail'[0].'type'", containsString("value_error.missing"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_5.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_6 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=RT")
                .post(baseUrlOfSut + "/v1/ranking/term")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_6.extract().statusCode()));
        
        ValidatableResponse res_7 = given().accept("application/json")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("nick_name=TBwDXOnF")
                .post(baseUrlOfSut + "/v1/users/update_nickname")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("hieu"))
                .body("'nick_name'", containsString("TBwDXOnF"))
                .body("'avatar'", containsString("default.jpg"))
                .body("'hashed_password'", containsString("$2b$12$WpOEuPVeSQFNsEl8bYMeUe48y6la1y.IZVvLvEorSNuwkDId8mUoq"))
                .body("'date_of_birth'", containsString("paKC75TfLfC"))
                .body("'create_date'", containsString("2023-03-03T04:47:54.275735"));
        
        expectationHandler.expect(ems);
        
        ValidatableResponse res_8 = given().accept("*/*")
                .header("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjciLCJleHAiOjE2Nzk2NDYxNzJ9.p4NvnfbvTkG1shVA_wiZfVfNXVXcqXvYv95gt-qPGvE") // Fixed Headers
                .contentType("application/x-www-form-urlencoded")
                .body("input_date=NvdaxUP")
                .post(baseUrlOfSut + "/v1/ranking/year")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Internal Server Error"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 404, 422).contains(res_8.extract().statusCode()));
    }


}
